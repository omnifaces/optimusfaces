<?xml version="1.0" encoding="UTF-8"?>
<project
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
>
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.omnifaces</groupId>
	<artifactId>optimusfaces</artifactId>
	<version>0.17-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>OptimusFaces</name>
	<description>Utility library for OmniFaces + PrimeFaces combined</description>
	<url>https://github.com/omnifaces/optimusfaces</url>
	<organization>
		<name>OmniFaces</name>
		<url>https://omnifaces.org</url>
	</organization>
	<inceptionYear>2016</inceptionYear>

	<developers>
		<developer>
			<id>balusc</id>
			<name>Bauke Scholtz</name>
			<email>balusc@gmail.com</email>
		</developer>
		<developer>
			<id>arjan.tijms</id>
			<name>Arjan Tijms</name>
			<email>arjan.tijms@gmail.com</email>
		</developer>
	</developers>

	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<scm>
		<url>https://github.com/omnifaces/optimusfaces</url>
		<connection>scm:git:git://github.com/omnifaces/optimusfaces.git</connection>
		<developerConnection>scm:git:git@github.com:omnifaces/optimusfaces.git</developerConnection>
	</scm>

	<distributionManagement>
		<snapshotRepository>
			<id>ossrh</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
	</distributionManagement>

	<properties>

		<!-- Minimum required Java versions. -->
		<javase.version>1.8</javase.version>
		<javaee.version>8</javaee.version>

		<!-- Essential Maven defaults. -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<maven.compiler.source>${javase.version}</maven.compiler.source>
		<maven.compiler.target>${javase.version}</maven.compiler.target>
		<maven.source.excludeResources>true</maven.source.excludeResources>

		<!-- Test versions. -->
		<test.wildfly.version>26.1.1.Final</test.wildfly.version> <!-- https://search.maven.org/artifact/org.wildfly.bom/wildfly -->
		<test.payara.version>5.2022.2</test.payara.version> <!-- https://search.maven.org/artifact/fish.payara.distributions/payara-web -->
		<test.tomee.version>8.0.11</test.tomee.version> <!-- https://search.maven.org/artifact/org.apache.tomee/arquillian-tomee-remote -->
		<test.wildfly-eclipselink.version>2.7.10</test.wildfly-eclipselink.version> <!-- https://search.maven.org/artifact/org.eclipse.persistence/eclipselink -->
		<test.payara-hibernate.version>5.6.9.Final</test.payara-hibernate.version> <!-- https://search.maven.org/artifact/org.hibernate/hibernate-core -->
		<test.h2.version>1.4.200</test.h2.version> <!-- https://search.maven.org/artifact/com.h2database/h2 -->
		<test.mysql-driver.version>8.0.29</test.mysql-driver.version> <!-- https://search.maven.org/artifact/mysql/mysql-connector-java -->
		<test.postgresql-driver.version>42.3.5</test.postgresql-driver.version> <!-- https://search.maven.org/artifact/org.postgresql/postgresql -->
		<test.omnifaces.version>3.13.3</test.omnifaces.version> <!-- https://search.maven.org/artifact/org.omnifaces/omnifaces -->
		<test.primefaces.version>11.0.0</test.primefaces.version> <!-- https://search.maven.org/artifact/org.omnifaces/omnifaces -->
	</properties>

	<dependencies>

		<!-- Java EE 8 web profile dependencies. -->
		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-web-api</artifactId>
			<version>${javaee.version}.0</version>
			<scope>provided</scope>
		</dependency>

		<!-- OmniFaces dependencies. -->
		<dependency>
			<groupId>org.omnifaces</groupId>
			<artifactId>omnifaces</artifactId>
			<version>3.0</version><!-- minimum version since OptimusFaces 0.15 -->
			<scope>provided</scope><!-- by enduser (of course enduser can provide a newer version) -->
		</dependency>
		<dependency>
			<groupId>org.omnifaces</groupId>
			<artifactId>omnipersistence</artifactId>
			<version>0.19</version>
		</dependency>

		<!-- PrimeFaces dependencies. -->
		<dependency>
			<groupId>org.primefaces</groupId>
			<artifactId>primefaces</artifactId>
			<version>10.0.0</version><!-- minimum version since OptimusFaces 0.15 -->
			<scope>provided</scope><!-- by enduser (of course enduser can provide a newer version) -->
		</dependency>

		<!-- Test dependencies.	-->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<version>5.8.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.junit5</groupId>
			<artifactId>arquillian-junit5-container</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-depchain</artifactId>
			<type>pom</type>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.graphene</groupId>
			<artifactId>graphene-webdriver</artifactId>
			<version>3.0.0-alpha.3</version>
			<type>pom</type>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${test.payara-hibernate.version}</version>
			<scope>test</scope> <!-- Only for the @Formula annotation on Address entity. -->
			<exclusions>
				<exclusion> <!-- Conflicts with Selenium's own one. -->
					<groupId>dom4j</groupId>
					<artifactId>dom4j</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>

			<!-- Test dependencies.	-->
			<dependency>
				<groupId>org.jboss.arquillian</groupId>
				<artifactId>arquillian-bom</artifactId>
				<version>1.7.0.Alpha10</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.jboss.arquillian.extension</groupId>
				<artifactId>arquillian-drone-bom</artifactId>
				<version>3.0.0-alpha.4</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.jboss.shrinkwrap.resolver</groupId>
				<artifactId>shrinkwrap-resolver-bom</artifactId>
				<version>3.1.4</version>
				<type>pom</type>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.jboss.arquillian.selenium</groupId>
				<artifactId>selenium-bom</artifactId>
				<version>3.13.0</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

 	<build>
		<resources>

			<!-- Exclude Eclipse's jsfdia from resources. -->
			<resource>
				<directory>src/main/resources</directory>
				<excludes>
					<exclude>**/*.jsfdia</exclude>
				</excludes>
			</resource>
		</resources>

		<plugins>

			<!-- Add missing license headers to source files. -->
			<plugin>
				<groupId>com.mycila</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>4.1</version>
				<configuration>
					<header>license.txt</header>
					<excludes>
						<exclude>*.*</exclude>
					</excludes>
					<mapping>
						<java>SLASHSTAR_STYLE</java>
					</mapping>
				</configuration>
				<executions>
					<execution>
						<phase>process-sources</phase>
						<goals>
							<goal>format</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Configure the JavaScript minifier. -->
			<plugin>
				<groupId>com.github.blutorange</groupId>
				<artifactId>closure-compiler-maven-plugin</artifactId>
				<version>2.21.0</version>
				<configuration>
					<baseSourceDir>${basedir}/src/main/resources</baseSourceDir>
					<baseTargetDir>${project.build.outputDirectory}</baseTargetDir>
					<sourceDir>META-INF/resources/optimusfaces</sourceDir>
					<targetDir>META-INF/resources/optimusfaces</targetDir>
					<closureLanguageOut>ECMASCRIPT5</closureLanguageOut>
				</configuration>
				<executions>
					<execution>
						<id>minify</id>
						<configuration>
							<skipMerge>true</skipMerge>
							<includes>**/*.js</includes>
						</configuration>
						<goals>
							<goal>minify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Configure the jar with the binaries. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.2.2</version>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
						</manifest>
						<manifestEntries>
							<URL>${project.url}</URL>
							<Extension-Name>${project.artifactId}</Extension-Name>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>

			<!-- Configure the jar with the sources. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>3.2.1</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Configure the jar with the javadoc. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.4.0</version>
				<configuration>
					<javadocVersion>${javase.version}</javadocVersion>
					<notimestamp>true</notimestamp>
					<splitindex>true</splitindex>
					<doctitle>OptimusFaces API documentation</doctitle>
					<links>
						<link>https://jakarta.ee/specifications/platform/${javaee.version}/apidocs/</link>
						<link>https://static.javadoc.io/org.omnifaces/omnipersistence/0.19/</link>
					</links>
					<additionalJOption>-J-Dhttp.agent=maven-javadoc-plugin-${pom‌​.name}</additionalJOption>
				</configuration>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Configure snapshot deployment to Sonatype. -->
			<plugin>
				<groupId>org.sonatype.plugins</groupId>
				<artifactId>nexus-staging-maven-plugin</artifactId>
				<version>1.6.13</version>
				<extensions>true</extensions>
				<configuration>
					<serverId>ossrh</serverId>
					<nexusUrl>https://oss.sonatype.org/</nexusUrl>
					<autoReleaseAfterClose>true</autoReleaseAfterClose>
				</configuration>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>

				<!-- Make sure Eclipse itself also runs license format and JavaScript minifier during build. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.mycila</groupId>
										<artifactId>license-maven-plugin</artifactId>
										<versionRange>[4.1,)</versionRange>
										<goals>
											<goal>format</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnConfiguration>true</runOnConfiguration>
										</execute>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.github.blutorange</groupId>
										<artifactId>closure-compiler-maven-plugin</artifactId>
										<versionRange>[2.21.0,)</versionRange>
										<goals>
											<goal>minify</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnConfiguration>true</runOnConfiguration>
										</execute>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>

				<!-- Global configuration for integration test profiles. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>3.3.0</version>
					<executions>
						<execution>
							<phase>process-test-classes</phase>
							<goals>
								<goal>unpack</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<outputDirectory>${project.build.directory}</outputDirectory>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>2.22.2</version>
					<executions>
						<execution>
							<goals>
								<goal>integration-test</goal>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<argLine>-Xms1024m -Xmx2048m</argLine><!-- https://github.com/travis-ci/travis-ci/issues/5631 -->
						<systemPropertyVariables>
							<profile.id>${project.activeProfiles[0].id}</profile.id>
							<optimusfaces.jar>${project.build.directory}/${project.build.finalName}.jar</optimusfaces.jar>
							<test.omnifaces.version>${test.omnifaces.version}</test.omnifaces.version>
							<test.primefaces.version>${test.primefaces.version}</test.primefaces.version>
							<test.payara-hibernate.version>${test.payara-hibernate.version}</test.payara-hibernate.version>
						</systemPropertyVariables>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<!-- NOTE: If Eclipse+M2E shows "Plugin execution not covered by lifecycle configuration" error in one of -->
		<!-- below sections, then you need to add a default lifecycle mapping as instructed in M2E documentation: -->
		<!-- https://www.eclipse.org/m2e/documentation/m2e-execution-not-covered.html#common-problems -->

		<!-- WildFly/Hibernate integration test profile: mvn verify -P wildfly-hibernate -->
		<profile>
			<id>wildfly-hibernate</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.wildfly.arquillian</groupId>
					<artifactId>wildfly-arquillian-container-managed</artifactId>
					<version>3.0.1.Final</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.wildfly</groupId>
											<artifactId>wildfly-dist</artifactId>
											<version>${test.wildfly.version}</version>
											<type>zip</type>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
							<execution>
								<id>install-mysql-driver-in-wildfly</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>mysql</groupId>
											<artifactId>mysql-connector-java</artifactId>
											<version>${test.mysql-driver.version}</version>
											<type>jar</type>
											<outputDirectory>${project.build.directory}/wildfly-${test.wildfly.version}/standalone/deployments</outputDirectory>
											<destFileName>mysql.jar</destFileName>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
							<execution>
								<id>install-psql-driver-in-wildfly</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.postgresql</groupId>
											<artifactId>postgresql</artifactId>
											<version>${test.postgresql-driver.version}</version>
											<type>jar</type>
											<outputDirectory>${project.build.directory}/wildfly-${test.wildfly.version}/standalone/deployments</outputDirectory>
											<destFileName>postgresql.jar</destFileName>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<systemPropertyVariables>
								<jboss.home>${project.build.directory}/wildfly-${test.wildfly.version}</jboss.home>
								<java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
							</systemPropertyVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- WildFly/EclipseLink integration test profile: mvn verify -P wildfly-eclipselink -->
		<profile>
			<id>wildfly-eclipselink</id>
			<dependencies>
				<dependency>
					<groupId>org.wildfly.arquillian</groupId>
					<artifactId>wildfly-arquillian-container-managed</artifactId>
					<version>3.0.1.Final</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.wildfly</groupId>
											<artifactId>wildfly-dist</artifactId>
											<version>${test.wildfly.version}</version>
											<type>zip</type>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
							<execution>
								<id>install-mysql-driver-in-wildfly</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>mysql</groupId>
											<artifactId>mysql-connector-java</artifactId>
											<version>${test.mysql-driver.version}</version>
											<type>jar</type>
											<outputDirectory>${project.build.directory}/wildfly-${test.wildfly.version}/standalone/deployments</outputDirectory>
											<destFileName>mysql.jar</destFileName>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
							<execution>
								<id>install-psql-driver-in-wildfly</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.postgresql</groupId>
											<artifactId>postgresql</artifactId>
											<version>${test.postgresql-driver.version}</version>
											<type>jar</type>
											<outputDirectory>${project.build.directory}/wildfly-${test.wildfly.version}/standalone/deployments</outputDirectory>
											<destFileName>postgresql.jar</destFileName>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
							<execution>
								<id>install-eclipselink-in-wildfly</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.eclipse.persistence</groupId>
											<artifactId>eclipselink</artifactId>
											<version>${test.wildfly-eclipselink.version}</version>
											<type>jar</type>
											<outputDirectory>${project.build.directory}/wildfly-${test.wildfly.version}/modules/system/layers/base/org/eclipse/persistence/main</outputDirectory>
											<destFileName>eclipselink.jar</destFileName>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<version>3.2.0</version>
						<executions>
							<execution>
								<id>register-eclipselink-in-wildfly</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}/wildfly-${test.wildfly.version}/modules/system/layers/base/org/eclipse/persistence/main</outputDirectory>
									<resources>
										<resource>
											<directory>${project.basedir}/src/test/resources/wildfly-eclipselink</directory>
											<includes>
												<include>module.xml</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<systemPropertyVariables>
								<jboss.home>${project.build.directory}/wildfly-${test.wildfly.version}</jboss.home>
								<java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
							</systemPropertyVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Payara/Hibernate integration test profile: mvn verify -P payara-hibernate -->
		<profile>
			<id>payara-hibernate</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.arquillian.container</groupId>
					<artifactId>arquillian-glassfish-managed-3.1</artifactId>
					<version>1.0.2</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>fish.payara.distributions</groupId>
											<artifactId>payara-web</artifactId>
											<version>${test.payara.version}</version>
											<type>zip</type>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
							<execution>
								<id>install-h2-in-payara</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>com.h2database</groupId>
											<artifactId>h2</artifactId>
											<version>${test.h2.version}</version>
											<type>jar</type>
											<outputDirectory>${project.build.directory}/payara5/glassfish/modules</outputDirectory>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
							<execution>
								<id>install-mysql-driver-in-payara</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>mysql</groupId>
											<artifactId>mysql-connector-java</artifactId>
											<version>${test.mysql-driver.version}</version>
											<type>jar</type>
											<outputDirectory>${project.build.directory}/payara5/glassfish/modules</outputDirectory>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
							<execution>
								<id>install-psql-driver-in-payara</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.postgresql</groupId>
											<artifactId>postgresql</artifactId>
											<version>${test.postgresql-driver.version}</version>
											<type>jar</type>
											<outputDirectory>${project.build.directory}/payara5/glassfish/modules</outputDirectory>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<environmentVariables>
								<GLASSFISH_HOME>${project.build.directory}/payara5</GLASSFISH_HOME>
							</environmentVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Payara/EclipseLink integration test profile: mvn verify -P payara-eclipselink -->
		<profile>
			<id>payara-eclipselink</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.arquillian.container</groupId>
					<artifactId>arquillian-glassfish-managed-3.1</artifactId>
					<version>1.0.2</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>fish.payara.distributions</groupId>
											<artifactId>payara-web</artifactId>
											<version>${test.payara.version}</version>
											<type>zip</type>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
							<execution>
								<id>install-h2-in-payara</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>com.h2database</groupId>
											<artifactId>h2</artifactId>
											<version>${test.h2.version}</version>
											<type>jar</type>
											<outputDirectory>${project.build.directory}/payara5/glassfish/modules</outputDirectory>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
							<execution>
								<id>install-mysql-driver-in-payara</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>mysql</groupId>
											<artifactId>mysql-connector-java</artifactId>
											<version>${test.mysql-driver.version}</version>
											<type>jar</type>
											<outputDirectory>${project.build.directory}/payara5/glassfish/modules</outputDirectory>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
							<execution>
								<id>install-psql-driver-in-payara</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.postgresql</groupId>
											<artifactId>postgresql</artifactId>
											<version>${test.postgresql-driver.version}</version>
											<type>jar</type>
											<outputDirectory>${project.build.directory}/payara5/glassfish/modules</outputDirectory>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<environmentVariables>
								<GLASSFISH_HOME>${project.build.directory}/payara5</GLASSFISH_HOME>
							</environmentVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- TomEE/OpenJPA integration test profile: mvn verify -P tomee-openjpa -->
		<profile>
			<id>tomee-openjpa</id>
			<dependencies>
				<dependency>
					<groupId>org.apache.tomee</groupId>
					<artifactId>arquillian-tomee-remote</artifactId>
					<version>${test.tomee.version}</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.apache.tomee</groupId>
											<artifactId>apache-tomee</artifactId>
											<version>${test.tomee.version}</version>
											<classifier>webprofile</classifier>
											<type>zip</type>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
							<execution>
								<id>install-h2-in-tomee</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>com.h2database</groupId>
											<artifactId>h2</artifactId>
											<version>${test.h2.version}</version>
											<type>jar</type>
											<outputDirectory>${project.build.directory}/apache-tomee-webprofile-${test.tomee.version}/lib</outputDirectory>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
							<execution>
								<id>install-mysql-driver-in-tomee</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>mysql</groupId>
											<artifactId>mysql-connector-java</artifactId>
											<version>${test.mysql-driver.version}</version>
											<type>jar</type>
											<outputDirectory>${project.build.directory}/apache-tomee-webprofile-${test.tomee.version}/lib</outputDirectory>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
							<execution>
								<id>install-psql-driver-in-tomee</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.postgresql</groupId>
											<artifactId>postgresql</artifactId>
											<version>${test.postgresql-driver.version}</version>
											<type>jar</type>
											<outputDirectory>${project.build.directory}/apache-tomee-webprofile-${test.tomee.version}/lib</outputDirectory>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<systemPropertyVariables>
								<tomee.dir>${project.build.directory}/apache-tomee-webprofile-${test.tomee.version}</tomee.dir>
							</systemPropertyVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Release deploy: mvn clean deploy -P release -->
		<profile>
			<id>release</id>
			<build>
				<plugins>

					<!-- Signing with GPG is a requirement for a release deployment to Maven central. -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>3.0.1</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>